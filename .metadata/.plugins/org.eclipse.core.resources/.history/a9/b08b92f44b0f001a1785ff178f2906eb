package edu.neu.csye6200;
import java.awt.BorderLayout;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Scanner;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

import com.opencsv.CSVReader;
import com.opencsv.CSVWriter;

public class ExitForm extends JFrame {
private JPanel pnl;
private TableModel model;
private TableModel model1;
private JTable table;
private JTextField txtFE;
private JButton btnSetFE;
private JButton btnSetFE1;
private JButton btn;
private ActionListener al,a2,a3;
private JLabel res;
String rstr = "";
    String[][] data2;
  public ExitForm() throws FileNotFoundException {
//    setDefaultCloseOperation(EXIT_ON_CLOSE);
   
    System.out.println("Inside Exit");
    String[][] data1 = displayTable();
//    System.out.println("Next Value"+data1.length);
    String[] columnNames = { "Patient's Name", "Insurance Number", "Doctor Id", "Doctor FName", "Doctor LName", "Specialist", "WardName", "Bed Number"};
    model = new DefaultTableModel(data1, columnNames);
    table = new JTable(model);
    getContentPane().add(new JScrollPane(table));
    pnl = new JPanel();
    pnl.add(new JLabel("Enter Name who is getting discharged:"));
    txtFE = new JTextField(25);
    pnl.add(txtFE);
    btnSetFE = new JButton("Discharge");
    btn = new JButton("Go Back");
    a3 = new ActionListener() {
		
		@Override
		public void actionPerformed(ActionEvent j) {
			if(j.getSource() == btn) {
				setVisible(false);
				new PatientCheckView();
			}
			
		}
	};
	btn.addActionListener(a3);
	
    res = new JLabel("");
    res.setFont(new Font("Arial", Font.PLAIN, 20));
    if(data1 == null)
    	btnSetFE.setEnabled(false);
 
    al = new ActionListener() {
      public void actionPerformed(ActionEvent e) {
// Action on discharge
     if(e.getSource() == btnSetFE) {
     rstr = Remove.demo(txtFE.getText());
//     System.out.println(rstr);
     pnl.add(res);
     System.out.println("Value Chweck:"+rstr);
     if(!rstr.equals("Patient not found")&&!rstr.equals("")) {
	     try { 
	    	 DoctorFactory d = new DoctorFactory();
	    	 String[] nextRecord = rstr.split(",");
	//		        	String data = String.join(",", nextRecord);
	        	String pname = nextRecord[0];
	        	String ino = nextRecord[1];
	        	String did = nextRecord[2];
	        	String dfname = nextRecord[3];
	        	String dlname = nextRecord[4];
	        	String sp = nextRecord[5];
	        	String wardname = nextRecord[6]+"Ward";
	        	String bedno = nextRecord[7];
	        	System.out.println(wardname);
	        	if(txtFE.getText().equals(pname)) {
	        		System.out.println(txtFE.getText()+" comparing "+pname);
	        		d.upDateReleasedDocs(did, sp, dfname, dlname);
	        		writeToWard(wardname, bedno);
	        	}
	
			}catch (Exception z) { 
				z.printStackTrace(); 
				}
	     
     }
     else {
    	 res.setText(rstr);
     }
     try {
     data2 = displayTable();
} catch (FileNotFoundException e1) {
e1.printStackTrace();
}
   model1 = new DefaultTableModel(data2, columnNames);
             table.setModel(model1);
     }
      }
    };
    btnSetFE.addActionListener(al);
    pnl.add(btnSetFE);
    pnl.add(btn);
    getContentPane().add(pnl, BorderLayout.SOUTH);
    
    setSize(910, 610);
    setVisible(true);
  }
 
  public String[][] displayTable() throws FileNotFoundException {
	  String[] data;
	  Scanner scanner = new Scanner(new File(".\\main.csv"));
	  Scanner scanner1 = new Scanner(new File(".\\main.csv"));
	  int k=0;
//	  System.out.println(scanner.hasNext());
	  while (scanner.hasNextLine()) {
//		  data = scanner.nextLine().split(",");
//		  System.out.println("Inside while");
		  scanner.nextLine();
		  k++;
	  }
	  System.out.println("K: "+k);
	  if(k == 0)
		  return null;
	  String[][] data1 = new String[k][];
	  k=0;
	  while (scanner1.hasNextLine()) {
		  data = scanner1.nextLine().split("[\\s+,]");
		  data1[k] = data;
		  System.out.println(data1[k]);
		  k++;
	  }
	  System.out.println("K1: "+k);
	  for(int i=0; i<data1.length; i++)
		  for(int j=0; j<8; j++) {
			  System.out.println(data1[i][j]);
		  }
	  return data1;
  }
  public void writeToWard(String ward, String n) throws IOException {
	  
	  List<String> l = new ArrayList<>();
	  FileWriter outputfile ;
	  FileReader filereader;
	  if(ward.contains("ormal")) {
		outputfile = new FileWriter(".\\Normal.csv"); 
		filereader = new FileReader(".\\Normal.csv");
	  }
	  else if(ward.contains("mer")) {
		  outputfile = new FileWriter(".\\Emergency.csv"); 
		  filereader = new FileReader(".\\Emergency.csv");
	  }
	  else {
		  outputfile = new FileWriter(".\\Children.csv");
		  filereader = new FileReader(".\\Children.csv");
	  }
	  try { 
			  
			CSVReader csvReader = new CSVReader(filereader);
			String[] nextRecord; 
		        
		        while ((nextRecord = csvReader.readNext()) != null) 
		        { 
		        	String data = String.join(",", nextRecord);
		        	l.add(data);
		        }
			csvReader.close();

		}catch (Exception e) { 
			e.printStackTrace(); }
	  String val = "";
		try { 
			String org;
//			FileReader filereader = new FileReader(file); 
			CSVReader csvReader = new CSVReader(filereader);
			String[] nextRecord; 
			boolean res= false;
			while ((nextRecord = csvReader.readNext()) != null)
			{	
			if(nextRecord[1].equals(n))
				{
				res = true;
//				writeToList();
				org = String.join(",", nextRecord);
				
//				int NStock = Integer.parseInt(nextRecord[1]);
//				NStock= Integer.parseInt(nextRecord[1])+Integer.parseInt(data[1]);
//				data[1] = Integer.toString(NStock);

				String newDetails=String.join(",", nextRecord);
				Collections.replaceAll(l, org, newDetails);
				
				csvReader.close();
				break;

				}
			}
		}
		catch (Exception e) { e.printStackTrace(); }
	  try { 
		  
		  
			CSVWriter writer = new CSVWriter(outputfile); 

			for(String x: l)
			{	
				System.out.println(x);
				String[] data = x.split("[\\s+,]");
				writer.writeNext(data); 
			}
			writer.close(); 
		} 
	  	
		catch (IOException e) { 
			e.printStackTrace(); 
		} 
  }
}